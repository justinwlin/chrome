ARG BASE_VERSION=1.21.0
FROM browserless/base:${BASE_VERSION}

# Build Args
ARG USE_CHROME_STABLE
ARG PUPPETEER_CHROMIUM_REVISION
ARG PUPPETEER_VERSION
ARG PORT=3000

# Application parameters and variables
ENV APP_DIR=/usr/src/app
ENV PUPPETEER_CACHE_DIR=${APP_DIR}
ENV PLAYWRIGHT_BROWSERS_PATH=${APP_DIR}
ENV CONNECTION_TIMEOUT=60000
ENV CHROME_PATH=/usr/bin/google-chrome
ENV HOST=0.0.0.0
ENV IS_DOCKER=true
ENV LANG="C.UTF-8"
ENV NODE_ENV=production
ENV PORT=${PORT}
ENV PUPPETEER_CHROMIUM_REVISION=${PUPPETEER_CHROMIUM_REVISION}
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV USE_CHROME_STABLE=${USE_CHROME_STABLE}
ENV WORKSPACE_DIR=$APP_DIR/workspace

RUN mkdir -p $APP_DIR $WORKSPACE_DIR

WORKDIR $APP_DIR

# Install app dependencies
COPY . .

# Install Chrome Stable when specified
RUN if [ "$USE_CHROME_STABLE" = "true" ]; then \
    cd /tmp &&\
    wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb &&\
    dpkg -i google-chrome-stable_current_amd64.deb;\
  fi

# Build and install external binaries + assets
# NOTE: The `PUPPETEER_VERSION` is needed for production versions
# listed in package.json
RUN if [ "$USE_CHROME_STABLE" = "true" ]; then \
    export CHROMEDRIVER_SKIP_DOWNLOAD=false;\
  else \
    export CHROMEDRIVER_SKIP_DOWNLOAD=true;\
  fi &&\
  npm i puppeteer@$PUPPETEER_VERSION;\
  npm run postinstall &&\
  npm run build &&\
  npm prune --production

# Change ownership of application directory back to root user
RUN chown -R root:root $APP_DIR

RUN apt-get update \
 && apt-get install -y \
    ffmpeg \
    espeak \
    espeak-data \
    libespeak1 \
    libespeak-dev \
    festival* \
    build-essential \
    flac \
    libasound2-dev \
    libsndfile1-dev \
    vorbis-tools \
    libxml2-dev \
    libxslt-dev \
    zlib1g-dev \
    python3-dev \
    python3-pip \
    git \
    file \
    htop \
    screen \
    vim \
    unzip \
 && pip3 install \
    numpy \
    boto3 \
    requests \
    tgt \
    youtube-dl \
    Pillow \
    aeneas \
 && apt-get clean

ENV PYTHONIOENCODING=UTF-8

RUN npm install -g typescript
RUN npm install -g ts-node 

# Expose the web-socket and HTTP ports
EXPOSE ${PORT}

CMD ["./start.sh"]

# docker run -v $(pwd):/app -itd
# docker run -v /Users/justinwlin/Documents/GitHub/tiktok:/usr/src/app/tiktok -p 3000:3000 -it de17842268d6be7d96165e6f3ad032086c19e9ed58aec2898e70394c9ffab893
